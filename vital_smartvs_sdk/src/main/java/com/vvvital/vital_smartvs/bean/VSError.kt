package com.vvvital.vital_smartvs.bean

/**
 * SmartVSApp
 *
 * Created By Administrator on 10/16/2019
 *
 * Copyright Softweb Solutions Inc. 2019,  All rights reserved.
 */
class VSError {

    // Error type
    enum class ErrorType {
        Communication,
        Measurement,
        InternalError,
        FingerVitalsMeasurement,
        Accelerometer,
        PowerAndCharging
    }

    //generated by
    enum class GeneratedBy {
        NA,
        BOTH,
        SLAVE,
        MASTER
    }

    var code: String? = ""
    var localizedDescription: String? = ""
    var errorType: ErrorType? = null
    var generatedBy: GeneratedBy? = null
    var reporting: String? = ""

    companion object {

        // Error init method
        fun init(code: String): VSError {

            val vsError = VSError()
            when (code) {
                "00" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Not used – this is the NOERROR code"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.NA
                    vsError.reporting = "n/a"
                }
                "01" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Unknown header (in previous packet)"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.NA
                    vsError.reporting = "n/a – handle with retries/timeout"
                }
                "02" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Unknown type field (in previous packet)"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.BOTH
                    vsError.reporting = "n/a – handle with retries/timeout"
                }
                "03" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Message length incorrect (in previous packet)"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.BOTH
                    vsError.reporting = "n/a – handle with retries/timeout"
                }
                "04" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Unknown CODE field (in previous packet)"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.BOTH
                    vsError.reporting = "n/a – handle with retries/timeout"
                }
                "05" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Invalid parameter (in previous packet)"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.BOTH
                    vsError.reporting = "n/a – handle with retries/timeout"
                }
                "06" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Timeout"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.BOTH
                    vsError.reporting = "Report Communication Lost"
                }
                "10" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Unused"
                    vsError.errorType = ErrorType.Measurement
                    vsError.generatedBy = GeneratedBy.NA
                    vsError.reporting = ""
                }
                "11" -> {
                    vsError.code = code
                    vsError.localizedDescription = "VCC_IR out of range"
                    vsError.errorType = ErrorType.Measurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Hardware Error"
                }
                "12" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Sensor Comms Error"
                    vsError.errorType = ErrorType.Measurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Hardware Error"
                }
                "13" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Invalid Ambient Temperature"
                    vsError.errorType = ErrorType.Measurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "14" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Unstable Reading"
                    vsError.errorType = ErrorType.Measurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "15" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Surface Measurement Out of Range (low)"
                    vsError.errorType = ErrorType.Measurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "16" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Surface Measurement Out of Range (high)"
                    vsError.errorType = ErrorType.Measurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "20" -> {
                    vsError.code = code
                    vsError.localizedDescription =
                        "The value read from the PPG Red LED is outside of the expected response range (future)"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "TBD"
                }
                "21" -> {
                    vsError.code = code
                    vsError.localizedDescription =
                        "The value read from the PPG IR LED is outside of the expected response range (future)"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "TBD"
                }
                "22" -> {
                    vsError.code = code
                    vsError.localizedDescription =
                        "The value read from the PPG UV LED is outside of the expected response range (future)"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "TBD"
                }
                "23" -> {
                    vsError.code = code
                    vsError.localizedDescription =
                        "The value read from the DLS1 LED is outside of the expected response range (future)"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "TBD"
                }
                "24" -> {
                    vsError.code = code
                    vsError.localizedDescription =
                        "The value read from the DLS2 LED is outside of the expected response range (future)"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "TBD"
                }
                "25" -> {
                    vsError.code = code
                    vsError.localizedDescription =
                        "Device ambient (from fuel gauge) is outside operating range [High]"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "26" -> {
                    vsError.code = code
                    vsError.localizedDescription =
                        "Device ambient (from fuel gauge) is outside operating range [Low]"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "27" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Max Pressure too high"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "28" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Pressure drop too fast"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "29" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Valve blockage test failed"
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "2A" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Inflation timeout "
                    vsError.errorType = ErrorType.FingerVitalsMeasurement
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "2B" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Finger-present check failed"
                    vsError.errorType = ErrorType.Accelerometer
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "30" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Excessive motion during measurement"
                    vsError.errorType = ErrorType.Accelerometer
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "31" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Freefall/impact event registered"
                    vsError.errorType = ErrorType.Accelerometer
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "40" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Battery too low to take measurement"
                    vsError.errorType = ErrorType.PowerAndCharging
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "41" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Internal temperature error"
                    vsError.errorType = ErrorType.PowerAndCharging
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error + CAUTION"
                }
                "42" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Charging error"
                    vsError.errorType = ErrorType.PowerAndCharging
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "43" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Measurement not allowed while charging"
                    vsError.errorType = ErrorType.PowerAndCharging
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report user error/warning"
                }
                "50" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Fuel Gauge error"
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "51" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Bluetooth Module error"
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "52" -> {
                    vsError.code = code
                    vsError.localizedDescription = "IR Sensor error"
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "53" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Accelerometer error"
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "54" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Valve Driver Control error"
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "55" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Pressure Sensor error "
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "56" -> {
                    vsError.code = code
                    vsError.localizedDescription = "Finger Cuff error"
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                "57" -> {
                    vsError.code = code
                    vsError.localizedDescription = "SSD error "
                    vsError.errorType = ErrorType.InternalError
                    vsError.generatedBy = GeneratedBy.SLAVE
                    vsError.reporting = "Report System Error"
                }
                else -> {
                    vsError.code = code
                    vsError.localizedDescription = "Not used – this is the NOERROR code"
                    vsError.errorType = ErrorType.Communication
                    vsError.generatedBy = GeneratedBy.NA
                    vsError.reporting = "n/a"
                }
            }
            return vsError
        }
    }
}